buildscript {
    ext {
        springBootVersion = '1.5.2.RELEASE'
    }
    repositories {
        jcenter()
        //mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath "gradle.plugin.com.gorylenko.gradle-git-properties:gradle-git-properties:1.4.17"
    }
}

apply plugin: 'groovy'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'war'
apply plugin: 'com.gorylenko.gradle-git-properties'

war {
    baseName = 'watchyourstocks'
    version = '1.0.0'
}

springBoot {
    buildInfo {
        additionalProperties = [
                by                   : System.properties['user.name'],
                operatingSystem      : "${System.properties['os.name']} (${System.properties['os.version']})",
                continuousIntegration: System.getenv('CI') ? true : false,
                machine              : InetAddress.localHost.hostName
        ]
    }
}

gitProperties {
    dateFormat = "yyyy-MM-dd HH:mm:ssZ"
    dateFormatTimeZone = 'IST'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    jcenter()
    mavenCentral()
}

configurations { providedRuntime }

dependencies {

//    compile('org.projectlombok:lombok')
//    compile('com.google.guava:guava')
    compile('joda-time:joda-time')

    compile('org.springframework.boot:spring-boot-starter-actuator')
    compile('org.springframework.boot:spring-boot-actuator-docs')
//    compile('org.springframework.boot:spring-boot-starter-aop')
    compile('org.springframework.boot:spring-boot-starter-mail')
    compile('org.springframework.boot:spring-boot-starter-jdbc')
    compile('org.springframework.boot:spring-boot-starter-data-jpa')
//    compile('org.springframework.boot:spring-boot-starter-data-rest')
    compile('org.springframework.boot:spring-boot-starter-integration')
//    compile('org.springframework.boot:spring-boot-starter-groovy-templates')
    compile('org.springframework.boot:spring-boot-starter-web')
    compile('org.springframework.boot:spring-boot-starter-websocket')

    compile("org.jsoup:jsoup:1.10.1")
    compile('com.google.firebase:firebase-admin:4.0.2')

//    compile("de.codecentric:spring-boot-admin-starter-client:1.4.5")
//    compile('io.springfox:springfox-swagger2:2.6.1')
//    compile('io.springfox:springfox-swagger-ui:2.6.1')

    compile('org.codehaus.groovy:groovy')
    compile("com.h2database:h2")

    runtime('com.zaxxer:HikariCP:2.4.5')
    runtime('org.springframework.boot:spring-boot-devtools')

    //providedRuntime('org.springframework.boot:spring-boot-starter-tomcat')
    //providedRuntime('org.springframework.boot:spring-boot-starter-jetty')
    providedRuntime('org.springframework.boot:spring-boot-starter-undertow')

    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile('org.spockframework:spock-core:1.0-groovy-2.4')
    testCompile('org.spockframework:spock-spring:1.0-groovy-2.4')
}

task wrapper(type: Wrapper) { gradleVersion = '2.4.4' }

idea {
    module {
        inheritOutputDirs = false
        outputDir = file("$buildDir/classes/main/")
    }
}

task syncBower(type: Sync) {
    from 'bower_components'

    include '**/*.min.css'
    include '**/*.min.js'
    include '**/*.map'
    include '**/*.eot'
    include '**/*.svg'
    include '**/*.ttf'
    include '**/*.woff'
    include '**/*.woff2'

    include 'pikaday/pikaday.js'
    include 'pikaday/css/pikaday.css'

    include 'sweetalert/dist/sweetalert.css'

    include 'skeleton/css/normalize.css'
    include 'skeleton/css/skeleton.css'

    include 'selectize/dist/css/selectize.default.css'

    include 'jquery.inputmask/dist/jquery.inputmask.bundle.js'
    include 'angular-inputmask/src/green.inputmask4angular.js'

    include 'firebase/*.js'

    into 'src/main/resources/static/modules_bower'

    includeEmptyDirs = false
}
